name: Auto-generate PR Documentation (ChatGPT)

on:
    pull_request:
        branches:
            - '**'
        types: [opened, edited, reopened, synchronize, ready_for_review]


permissions:
  contents: write
  pull-requests: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate docs and open PR
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;
            const prNumber = pr.number;

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: prNumber, per_page: 100 }
            );

            if (!files.length) {
              core.info("No changed files in PR.");
              return;
            }

            const diffBlocks = files.map(f => {
              const header = `### ${f.status.toUpperCase()}: ${f.filename}`;
              const patch = f.patch ? `\n\`\`\`diff\n${f.patch}\n\`\`\`` : "";
              return `${header}${patch}`;
            }).join("\n\n");

            const prompt = `
                        Write a concise Markdown doc for this PR:
                        - High-level summary
                        - New/changed endpoints, controllers, schedules, events, config
                        - Breaking changes (if any)
                        - Release notes (bulleted)
                        - How-to-verify checklist
                        - Use headings. Keep it under ~400 lines.

            DIFF:
            \${diffBlocks}
                        `.trim();


                        // 3) Call OpenAI Chat Completions
                        const fetch = globalThis.fetch;
                        const res = await fetch("https://api.openai.com/v1/chat/completions", {
                        method: "POST",
                        headers: {
                            "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            model: "gpt-4.1-mini",
                            messages: [{ role: "user", content: prompt }],
                            temperature: 0.2,
                            max_tokens: 1800
                        })
                        });

                        if (!res.ok) {
                        const body = await res.text();
                        core.setFailed(`OpenAI API error: ${res.status} ${body}`);
                        return;
                        }

                        const data = await res.json();
                        const docText =
                        (data.choices && data.choices[0] && data.choices[0].message && data.choices[0].message.content)
                        || "# PR Docs\n\n(No content)";

                        // 4) Create docs branch off the PR head
                        const baseRef = pr.head.ref;
                        const headRef = await github.rest.git.getRef({ owner, repo, ref: `heads/${baseRef}` });
                        const headSha = headRef.data.object.sha;

                        const docsBranch = `docs/auto/pr-${prNumber}-${Date.now()}`;
                        await github.rest.git.createRef({
                        owner, repo,
                        ref: `refs/heads/${docsBranch}`,
                        sha: headSha
                        });

                        const path = `docs/prs/PR-${prNumber}.md`;
                        const contentB64 = Buffer.from(docText, "utf8").toString("base64");

                        await github.rest.repos.createOrUpdateFileContents({
                        owner, repo,
                        path,
                        message: `docs: auto-generated documentation for PR #${prNumber}`,
                        content: contentB64,
                        branch: docsBranch
                        });

                        const newPr = await github.rest.pulls.create({
                        owner, repo,
                        title: `docs: Add documentation for PR #${prNumber}`,
                        head: docsBranch,
                        base: pr.base.ref,
                        body: `Auto-generated docs based on diff from #${prNumber}. Please review before merge.`
                        });

                        core.info(`Opened documentation PR: ${newPr.data.html_url}`);
